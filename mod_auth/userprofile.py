'''
    mission.mod_auth.userprofile
'''
# System level imports
from datetime import datetime

# Flask imports
from flask import request, session, redirect, url_for, render_template, flash, jsonify, send_from_directory, make_response
from flask_security import current_user, AnonymousUser

# Database imports
from mission.lib.database import db_session
from mission.lib.utils import ajax_response, update_user_activity
from mission.mod_auth.models import User, Role, UserGroup, UserProfile, Notification, Alert
from mission import dprint

'''
    : Profile Functions :
'''
def curr_user():
    ''' Find current user '''
    
    if not hasattr(current_user, 'username'):
        return None
        
    return User.query.filter(User.username==current_user.username).first() 

def find_alerts():
    
    alerts = Alert.query.filter(Alert.was_read == False).all()
    
    if len(alerts) > 0:
        return alerts
    else:
        return None

def find_user_notifications():    
    user = curr_user()
    
    if not user:
        return make_response(jsonify(
        status='success',
        count = 0,
        notifications = [],
        ), 200)
    
    rows = Notification.query.\
        filter(Notification.user==user).\
        filter(Notification.was_read==False).\
        order_by(Notification.id).\
        all()
    
    notifications = []
    notice = {
        'id': None,
        'creator': None,
        'title' : None, 
        'content': None,
    }    
    
    for r in rows:
        creator = User.query.filter(User.username==r.creator).first()

        n = {}
        for key in notice.keys():
            n[key] = getattr(r, key)
        
        n['avatar'] = creator.user_profile.avatar
        
        notifications.append(n)
    
    return notifications

def ajax_find_user_notifications():
    ''' Retrieve notifications from database for user from an AJAX call'''
    
    notifications = find_user_notifications()
    
    if notifications: 
    
        return make_response(jsonify(
            status='success',
            count = len(notifications),
            notifications = notifications,
            ), 200)
        
    else:
    
        return make_response(jsonify(
            status='success',
            count = 0,
            notifications = None,
            ), 200)

def update_notice(req, notice=None):
    ''' Update notification status '''

    applog.info("notice found", notice)
    
    if not notice:
        return make_response(jsonify(
            status='error',
            message='No notification ID',
            ), 200)

    user = curr_user()
    notice = notice.split('-')[1]
    
    Notification.query.\
        filter(Notification.id==notice).\
        filter(Notification.user==user).\
        update(dict(was_read=True))
    
    db_session.commit()
    
    return make_response(jsonify(
        status='success',
        ),200)

def handle_client_alert_event(req):
    ''' Read or update alerts from client event '''

    """
        : VALID CLIENT JSON :
        
        Following values are legitimate client provided form data to process
        for alert events
        
        [keys]
        @val {alert_id}   The HTML alert ID generated by Jinja layout
        @val {action}     The action taken on the client event
        
        [actions]
        @pval {read}      Client has read the alert
        
        Any failure or erroneous data invalidates processing and returns a null 200
    """ 
    keys = ['alert_id', 'action']
    actions = ['read']
    
    if not hasattr(req, 'json'):
        return ajax_response()

    alert = req.json
    
    for k in keys:
        if k not in alert.keys():
           return ajax_response()

    alert_id = int(alert['alert_id'].split('-')[-1])
    action = alert['action']
    
    if action not in actions:
        return alax_response()

    """
        : PROCESS ALERT :
        
        Find the alert in the database and take selected action
    """
    alert_obj = Alert.query.filter(Alert.id == alert_id).first()
    
    if not alert_obj:
        return ajax_response()
    
    else:
        alert_obj.was_read = True
        db_session.commit()

    return ajax_response(data=action)